#!/usr/bin/env node

/**
 * Script para Limpeza de Edge Functions Duplicadas e Desnecess√°rias
 * 
 * Este script identifica e remove edge functions que:
 * - T√™m funcionalidades duplicadas
 * - S√£o vers√µes obsoletas
 * - N√£o s√£o utilizadas no sistema
 * - S√£o apenas para teste/desenvolvimento
 */

const fs = require('fs');
const path = require('path');

// Cores para output
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

/**
 * Edge Functions identificadas para remo√ß√£o
 */
const FUNCTIONS_TO_REMOVE = {
  // DUPLICATAS DE C√ÅLCULO DAS
  duplicates_das: [
    'calculo-das-automatico',  // Duplicata de calculate-das-service
    'generate-das-service'     // Duplicata de calculate-das-service
  ],
  
  // DUPLICATAS DE IA/ASSISTENTE
  duplicates_ai: [
    'ai-contextual-assistant', // Duplicata de assistente-contabil-ia
    'ai-semantic-service',     // Duplicata de ai-service
    'consulta-ia'              // Duplicata de assistente-contabil-ia
  ],
  
  // DUPLICATAS DE PROCESSAMENTO DE DOCUMENTOS
  duplicates_documents: [
    'process-document',        // DEPRECATED - usa unified-document-processor
    'process-document-service', // Duplicata de intelligent-document-processor
    'process-ocr',             // Duplicata de pdf-ocr-service
    'queue-document-processor' // Funcionalidade n√£o essencial
  ],
  
  // DUPLICATAS DE ANALYTICS
  duplicates_analytics: [
    'dashboard-analytics',     // Duplicata de analytics-service
    'generate-analytics-reports', // Duplicata de analytics-service
    'export-analytics-report', // Duplicata de analytics-service
    'metrics-dashboard',       // Duplicata de simple-analytics
    'assistant-dashboard-data' // Duplicata de analytics-service
  ],
  
  // DUPLICATAS DE NOTIFICA√á√ïES
  duplicates_notifications: [
    'generate-notifications',  // Duplicata de notification-service
    'intelligent-notifications', // Duplicata de notification-service
    'cleanup-notifications'    // Funcionalidade n√£o essencial
  ],
  
  // DUPLICATAS DE AUTOMA√á√ÉO
  duplicates_automation: [
    'automation-monitor',      // Duplicata de automation-service
    'intelligent-alerts-scheduler' // Duplicata de automation-service
  ],
  
  // FUN√á√ïES DE TESTE E DESENVOLVIMENTO
  test_functions: [
    'test-simple',            // Apenas para testes
    'create-test-user'        // Apenas para desenvolvimento
  ],
  
  // FUN√á√ïES EXPERIMENTAIS/N√ÉO UTILIZADAS
  experimental: [
    'mcp-context-provider',   // Experimental
    'performance-monitor',    // Duplicata de health-service
    'unified-api-gateway'     // N√£o utilizado
  ],
  
  // DUPLICATAS DE CNPJ
  duplicates_cnpj: [
    // Manter apenas consultar-cnpj-optimized (vers√£o melhor)
    'consultar-cnpj'          // Vers√£o n√£o otimizada
  ]
};

/**
 * Edge Functions que devem ser MANTIDAS (essenciais)
 */
const ESSENTIAL_FUNCTIONS = [
  // Fiscais/Tribut√°rias
  'calculate-das-service',
  'simulador-tributario',
  'gerar-guia-pdf',
  'gerar-relatorio-pdf',
  'get-fiscal-obligations',
  'compliance-monitor',
  'fiscal-automation-engine',
  'generate-accounting-entries',
  
  // IA e Assistente
  'assistente-contabil-ia',
  'assistente-contabil-ia-enhanced',
  'ai-service',
  
  // Processamento de Documentos
  'intelligent-document-processor',
  'unified-document-processor',
  'classify-document',
  'pdf-ocr-service',
  'nfe-processor',
  
  // Integra√ß√£o e Servi√ßos
  'consultar-cnpj-optimized',
  'bank-reconciliation-engine',
  'ofx-parser-multi-bank',
  'crm-service',
  'backup-service',
  'webhook-dispatcher',
  
  // Analytics
  'analytics-service',
  'simple-analytics',
  
  // Automa√ß√£o e Notifica√ß√µes
  'automation-service',
  'notification-service',
  
  // Servi√ßos Core
  'health-service',
  'company-service',
  'document-service',
  'portal-service'
];

/**
 * Logger com cores
 */
class Logger {
  static info(message) {
    console.log(`${colors.blue}‚Ñπ${colors.reset} ${message}`);
  }
  
  static success(message) {
    console.log(`${colors.green}‚úÖ${colors.reset} ${message}`);
  }
  
  static warning(message) {
    console.log(`${colors.yellow}‚ö†Ô∏è${colors.reset} ${message}`);
  }
  
  static error(message) {
    console.log(`${colors.red}‚ùå${colors.reset} ${message}`);
  }
  
  static header(message) {
    console.log(`\n${colors.cyan}${colors.reset}`);
    console.log(`${colors.cyan}üßπ ${message}${colors.reset}`);
    console.log(`${colors.cyan}${'='.repeat(message.length + 4)}${colors.reset}\n`);
  }
}

/**
 * Classe principal para limpeza
 */
class EdgeFunctionCleaner {
  constructor() {
    this.functionsDir = path.join(__dirname, 'supabase', 'functions');
    this.backupDir = path.join(__dirname, 'backup-edge-functions');
    this.removedFunctions = [];
    this.keptFunctions = [];
  }
  
  /**
   * Lista todas as edge functions existentes
   */
  listExistingFunctions() {
    try {
      const items = fs.readdirSync(this.functionsDir);
      return items.filter(item => {
        const itemPath = path.join(this.functionsDir, item);
        return fs.statSync(itemPath).isDirectory() && !item.startsWith('_');
      });
    } catch (error) {
      Logger.error(`Erro ao listar fun√ß√µes: ${error.message}`);
      return [];
    }
  }
  
  /**
   * Cria backup das fun√ß√µes antes de remover
   */
  createBackup() {
    Logger.info('Criando backup das edge functions...');
    
    if (!fs.existsSync(this.backupDir)) {
      fs.mkdirSync(this.backupDir, { recursive: true });
    }
    
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupPath = path.join(this.backupDir, `backup-${timestamp}`);
    
    try {
      // Copiar toda a pasta functions
      this.copyDirectory(this.functionsDir, backupPath);
      Logger.success(`Backup criado em: ${backupPath}`);
      return backupPath;
    } catch (error) {
      Logger.error(`Erro ao criar backup: ${error.message}`);
      throw error;
    }
  }
  
  /**
   * Copia diret√≥rio recursivamente
   */
  copyDirectory(src, dest) {
    if (!fs.existsSync(dest)) {
      fs.mkdirSync(dest, { recursive: true });
    }
    
    const items = fs.readdirSync(src);
    
    for (const item of items) {
      const srcPath = path.join(src, item);
      const destPath = path.join(dest, item);
      
      if (fs.statSync(srcPath).isDirectory()) {
        this.copyDirectory(srcPath, destPath);
      } else {
        fs.copyFileSync(srcPath, destPath);
      }
    }
  }
  
  /**
   * Remove uma edge function
   */
  removeFunction(functionName) {
    const functionPath = path.join(this.functionsDir, functionName);
    
    if (!fs.existsSync(functionPath)) {
      Logger.warning(`Fun√ß√£o ${functionName} n√£o encontrada`);
      return false;
    }
    
    try {
      // Remover diret√≥rio recursivamente
      fs.rmSync(functionPath, { recursive: true, force: true });
      Logger.success(`Removida: ${functionName}`);
      this.removedFunctions.push(functionName);
      return true;
    } catch (error) {
      Logger.error(`Erro ao remover ${functionName}: ${error.message}`);
      return false;
    }
  }
  
  /**
   * Analisa e exibe relat√≥rio antes da remo√ß√£o
   */
  analyzeForRemoval() {
    const existingFunctions = this.listExistingFunctions();
    const allToRemove = Object.values(FUNCTIONS_TO_REMOVE).flat();
    
    Logger.header('AN√ÅLISE DE EDGE FUNCTIONS PARA REMO√á√ÉO');
    
    console.log(`üìä Estat√≠sticas:`);
    console.log(`   ‚Ä¢ Total de fun√ß√µes existentes: ${existingFunctions.length}`);
    console.log(`   ‚Ä¢ Fun√ß√µes marcadas para remo√ß√£o: ${allToRemove.length}`);
    console.log(`   ‚Ä¢ Fun√ß√µes essenciais a manter: ${ESSENTIAL_FUNCTIONS.length}`);
    
    console.log(`\nüóëÔ∏è Fun√ß√µes que ser√£o removidas por categoria:\n`);
    
    for (const [category, functions] of Object.entries(FUNCTIONS_TO_REMOVE)) {
      const categoryName = category.replace(/_/g, ' ').toUpperCase();
      console.log(`   ${categoryName}:`);
      
      for (const func of functions) {
        const exists = existingFunctions.includes(func);
        const status = exists ? 'üóëÔ∏è' : '‚ùì';
        console.log(`     ${status} ${func} ${exists ? '' : '(n√£o encontrada)'}`);
      }
      console.log('');
    }
    
    console.log(`‚úÖ Fun√ß√µes essenciais que ser√£o mantidas:`);
    for (const func of ESSENTIAL_FUNCTIONS) {
      const exists = existingFunctions.includes(func);
      const status = exists ? '‚úÖ' : '‚ùì';
      console.log(`   ${status} ${func} ${exists ? '' : '(n√£o encontrada)'}`);
    }
    
    return { existingFunctions, allToRemove };
  }
  
  /**
   * Executa a limpeza
   */
  async performCleanup(createBackup = true) {
    Logger.header('INICIANDO LIMPEZA DAS EDGE FUNCTIONS');
    
    // An√°lise pr√©via
    const { existingFunctions, allToRemove } = this.analyzeForRemoval();
    
    // Confirma√ß√£o do usu√°rio
    console.log(`\n‚ö†Ô∏è Esta opera√ß√£o ir√° remover ${allToRemove.length} edge functions.`);
    console.log(`${createBackup ? 'üì¶ Um backup ser√° criado antes da remo√ß√£o.' : 'üö® NENHUM backup ser√° criado!'}`);
    
    // Criar backup se solicitado
    let backupPath = null;
    if (createBackup) {
      backupPath = this.createBackup();
    }
    
    // Executar remo√ß√µes
    Logger.info('Iniciando remo√ß√£o das fun√ß√µes...');
    
    let removedCount = 0;
    let errorCount = 0;
    
    for (const functionName of allToRemove) {
      if (existingFunctions.includes(functionName)) {
        if (this.removeFunction(functionName)) {
          removedCount++;
        } else {
          errorCount++;
        }
      }
    }
    
    // Relat√≥rio final
    Logger.header('LIMPEZA CONCLU√çDA');
    
    console.log(`üìä Resultados:`);
    console.log(`   ‚Ä¢ Fun√ß√µes removidas: ${removedCount}`);
    console.log(`   ‚Ä¢ Erros: ${errorCount}`);
    console.log(`   ‚Ä¢ Fun√ß√µes restantes: ${existingFunctions.length - removedCount}`);
    
    if (backupPath) {
      console.log(`   ‚Ä¢ Backup salvo em: ${backupPath}`);
    }
    
    console.log(`\nüóëÔ∏è Fun√ß√µes removidas:`);
    for (const func of this.removedFunctions) {
      console.log(`   ‚Ä¢ ${func}`);
    }
    
    console.log(`\n‚úÖ Pr√≥ximos passos:`);
    console.log(`   1. Verificar se o sistema ainda funciona corretamente`);
    console.log(`   2. Atualizar testes para remover refer√™ncias √†s fun√ß√µes removidas`);
    console.log(`   3. Atualizar documenta√ß√£o`);
    console.log(`   4. Fazer deploy das mudan√ßas`);
    
    return {
      removedCount,
      errorCount,
      backupPath,
      removedFunctions: this.removedFunctions
    };
  }
  
  /**
   * Modo dry-run (apenas simula)
   */
  dryRun() {
    Logger.header('SIMULA√á√ÉO DE LIMPEZA (DRY RUN)');
    
    const { existingFunctions, allToRemove } = this.analyzeForRemoval();
    
    console.log(`\nüîç Simula√ß√£o - Nenhuma fun√ß√£o ser√° realmente removida:`);
    
    let wouldRemove = 0;
    for (const functionName of allToRemove) {
      if (existingFunctions.includes(functionName)) {
        console.log(`   üóëÔ∏è Removeria: ${functionName}`);
        wouldRemove++;
      }
    }
    
    console.log(`\nüìä Resumo da simula√ß√£o:`);
    console.log(`   ‚Ä¢ Fun√ß√µes que seriam removidas: ${wouldRemove}`);
    console.log(`   ‚Ä¢ Fun√ß√µes que permaneceriam: ${existingFunctions.length - wouldRemove}`);
    
    console.log(`\nüí° Para executar a limpeza real:`);
    console.log(`   node cleanup-edge-functions.js --execute`);
  }
}

/**
 * Fun√ß√£o principal
 */
async function main() {
  const args = process.argv.slice(2);
  const cleaner = new EdgeFunctionCleaner();
  
  try {
    if (args.includes('--execute') || args.includes('-e')) {
      const createBackup = !args.includes('--no-backup');
      await cleaner.performCleanup(createBackup);
    } else if (args.includes('--help') || args.includes('-h')) {
      console.log('üßπ Script de Limpeza de Edge Functions\n');
      console.log('Uso:');
      console.log('  node cleanup-edge-functions.js                # Simula√ß√£o (dry run)');
      console.log('  node cleanup-edge-functions.js --execute     # Executar limpeza');
      console.log('  node cleanup-edge-functions.js -e --no-backup # Executar sem backup');
      console.log('  node cleanup-edge-functions.js --help        # Esta ajuda');
    } else {
      cleaner.dryRun();
    }
  } catch (error) {
    Logger.error(`Erro fatal: ${error.message}`);
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main();
}

module.exports = { EdgeFunctionCleaner, FUNCTIONS_TO_REMOVE, ESSENTIAL_FUNCTIONS };
