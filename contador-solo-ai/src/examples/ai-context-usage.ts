'use client'

/**
 * üöÄ EXEMPLO DE USO DO AI CONTEXT SERVICE REFATORADO
 * 
 * Este arquivo demonstra como usar o novo AIContextService
 * com Singleton Pattern, Result Pattern e Error Handling estruturado
 */

import { useState, useCallback } from 'react'
import { AIContextService } from '@/services/ai-context-service'
import { logger } from '@/services/structured-logger'
import { unifiedCacheService } from '@/services/unified-cache-service'
import type { EnhancedAIContext, ContextualData } from '@/services/ai-context-service'

// =====================================================
// EXEMPLO 1: USO B√ÅSICO COM SINGLETON
// =====================================================

export async function exemploUsoBasico() {
  // ‚úÖ Usar getInstance() ao inv√©s de new
  const aiContext = AIContextService.getInstance()
  
  const context: EnhancedAIContext = {
    userId: 'user-123',
    empresaId: 'empresa-456',
    includeFinancialData: true,
    includeObligations: true,
    includeDocuments: false,
    includeInsights: true,
    timeRange: 'last_3_months'
  }

  // ‚úÖ Usar Result Pattern para tratamento de erros
  const result = await aiContext.collectContextualData(context)
  
  if (result.success) {
    console.log('‚úÖ Dados coletados com sucesso:', result.data)
    
    // Acessar dados da empresa
    if (result.data.empresa) {
      console.log('üìä Empresa:', result.data.empresa.nome)
      console.log('üí∞ C√°lculos recentes:', result.data.empresa.calculos_recentes.length)
      console.log('üìã Obriga√ß√µes pendentes:', result.data.empresa.obrigacoes_pendentes.length)
      console.log('üéØ Score de conformidade:', result.data.empresa.insights.score_conformidade)
    }
  } else {
    // ‚úÖ Error handling estruturado
    console.error('‚ùå Erro ao coletar dados:', result.error.message)
    console.error('üîç C√≥digo do erro:', result.error.code)
    console.error('üìù Contexto:', result.error.context)
    console.error('üÜî Trace ID:', result.error.traceId)
  }
}

// =====================================================
// EXEMPLO 2: MONITORAMENTO DE PERFORMANCE
// =====================================================

export async function exemploMonitoramento() {
  const aiContext = AIContextService.getInstance()
  
  // ‚úÖ Verificar uso de recursos
  const resourceUsage = aiContext.getResourceUsage()
  console.log('üìä Uso de recursos:', {
    memoryUsage: `${(resourceUsage.memoryUsage / 1024 / 1024).toFixed(2)} MB`,
    cacheSize: resourceUsage.cacheSize,
    activeConnections: resourceUsage.activeConnections,
    uptime: `${(resourceUsage.uptime / 1000 / 60).toFixed(2)} min`
  })

  // ‚úÖ Verificar m√©tricas do cache
  const cacheMetrics = unifiedCacheService.getMetrics()
  console.log('üíæ M√©tricas do cache:', {
    hitRate: `${(cacheMetrics.hitRate * 100).toFixed(2)}%`,
    totalRequests: cacheMetrics.totalRequests,
    cacheSize: cacheMetrics.cacheSize,
    evictions: cacheMetrics.evictions
  })

  // ‚úÖ Estat√≠sticas detalhadas do cache
  const detailedStats = unifiedCacheService.getDetailedStats()
  console.log('üìà Estat√≠sticas detalhadas:', {
    entriesByStrategy: detailedStats.entriesByStrategy,
    mostAccessedEntry: detailedStats.mostAccessedEntry,
    oldestEntry: detailedStats.oldestEntry
  })
}

// =====================================================
// EXEMPLO 3: GERENCIAMENTO DE CACHE INTELIGENTE
// =====================================================

export async function exemploCacheInteligente() {
  // ‚úÖ Invalidar cache por regras de neg√≥cio
  const deletedCount = unifiedCacheService.invalidateByRules([
    'calculo-new',
    'empresa-update'
  ])
  console.log(`üóëÔ∏è Invalidadas ${deletedCount} entradas do cache`)

  // ‚úÖ Invalidar cache por padr√£o
  const patternDeleted = unifiedCacheService.invalidatePattern('empresa-123')
  console.log(`üéØ Invalidadas ${patternDeleted} entradas por padr√£o`)

  // ‚úÖ Limpar cache completamente se necess√°rio
  // unifiedCacheService.clear()
}

// =====================================================
// EXEMPLO 4: LOGGING ESTRUTURADO
// =====================================================

export async function exemploLogging() {
  // ‚úÖ Logs estruturados com contexto
  logger.info('Iniciando opera√ß√£o de exemplo', {
    operation: 'exemplo_logging',
    userId: 'user-123',
    timestamp: new Date().toISOString()
  })

  try {
    // Simular opera√ß√£o
    await new Promise(resolve => setTimeout(resolve, 100))
    
    logger.info('Opera√ß√£o conclu√≠da com sucesso', {
      operation: 'exemplo_logging',
      duration: 100,
      success: true
    })
  } catch (error) {
    logger.error('Opera√ß√£o falhou', {
      operation: 'exemplo_logging',
      error: error instanceof Error ? error.message : String(error),
      success: false
    })
  }

  // ‚úÖ Buscar logs por filtros
  const recentLogs = logger.getLogs({
    operation: 'exemplo_logging',
    since: new Date(Date.now() - 60000) // √öltimos 60 segundos
  })
  console.log(`üìù Encontrados ${recentLogs.length} logs recentes`)

  // ‚úÖ Estat√≠sticas dos logs
  const logStats = logger.getLogStats()
  console.log('üìä Estat√≠sticas dos logs:', logStats)
}

// =====================================================
// EXEMPLO 5: CLEANUP DE RECURSOS
// =====================================================

export async function exemploCleanup() {
  const aiContext = AIContextService.getInstance()
  
  // ‚úÖ Cleanup manual se necess√°rio (normalmente autom√°tico)
  await aiContext.cleanup()
  console.log('üßπ Cleanup do AIContextService conclu√≠do')

  // ‚úÖ Cleanup do cache
  unifiedCacheService.destroy()
  console.log('üßπ Cleanup do UnifiedCacheService conclu√≠do')
}

// =====================================================
// EXEMPLO 6: TRATAMENTO DE ERROS AVAN√áADO
// =====================================================

export async function exemploTratamentoErros() {
  const aiContext = AIContextService.getInstance()
  
  const context: EnhancedAIContext = {
    userId: 'user-invalid', // ID inv√°lido para for√ßar erro
    empresaId: 'empresa-inexistente',
    includeFinancialData: true
  }

  const result = await aiContext.collectContextualData(context)
  
  if (!result.success) {
    const error = result.error
    
    // ‚úÖ An√°lise detalhada do erro
    console.log('üîç An√°lise do erro:', {
      message: error.message,
      code: error.code,
      context: error.context,
      traceId: error.traceId,
      originalError: error.originalError?.message
    })

    // ‚úÖ A√ß√µes baseadas no tipo de erro
    switch (error.code) {
      case 'EMPRESA_FETCH_FAILED':
        console.log('üí° Sugest√£o: Verificar se a empresa existe e se o usu√°rio tem acesso')
        break
      case 'CONTEXT_COLLECTION_FAILED':
        console.log('üí° Sugest√£o: Verificar conectividade e tentar novamente')
        break
      default:
        console.log('üí° Sugest√£o: Contatar suporte t√©cnico')
    }

    // ‚úÖ Log estruturado do erro
    logger.error('Exemplo de tratamento de erro', {
      errorCode: error.code,
      errorMessage: error.message,
      traceId: error.traceId,
      context: error.context
    })
  }
}

// =====================================================
// EXEMPLO 7: USO EM COMPONENTE REACT
// =====================================================

export function useAIContextExample() {
  // ‚úÖ Hook personalizado para usar o AIContextService
  const [contextData, setContextData] = useState<ContextualData | null>(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const loadContextData = useCallback(async (context: EnhancedAIContext) => {
    setLoading(true)
    setError(null)

    try {
      const aiContext = AIContextService.getInstance()
      const result = await aiContext.collectContextualData(context)

      if (result.success) {
        setContextData(result.data)
      } else {
        setError(result.error.message)
        logger.error('Failed to load context data in component', {
          errorCode: result.error.code,
          errorMessage: result.error.message,
          traceId: result.error.traceId
        })
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Unknown error'
      setError(errorMessage)
      logger.error('Unexpected error in useAIContextExample', {
        error: errorMessage
      })
    } finally {
      setLoading(false)
    }
  }, [])

  return {
    contextData,
    loading,
    error,
    loadContextData,
    // ‚úÖ Fun√ß√µes utilit√°rias
    clearCache: () => unifiedCacheService.clear(),
    getMetrics: () => unifiedCacheService.getMetrics(),
    getResourceUsage: () => AIContextService.getInstance().getResourceUsage()
  }
}

// =====================================================
// FUN√á√ÉO PRINCIPAL PARA TESTAR TODOS OS EXEMPLOS
// =====================================================

export async function executarTodosExemplos() {
  console.log('üöÄ Iniciando exemplos do AI Context Service refatorado...\n')

  try {
    console.log('1Ô∏è‚É£ Exemplo de uso b√°sico:')
    await exemploUsoBasico()
    console.log('\n')

    console.log('2Ô∏è‚É£ Exemplo de monitoramento:')
    await exemploMonitoramento()
    console.log('\n')

    console.log('3Ô∏è‚É£ Exemplo de cache inteligente:')
    await exemploCacheInteligente()
    console.log('\n')

    console.log('4Ô∏è‚É£ Exemplo de logging:')
    await exemploLogging()
    console.log('\n')

    console.log('5Ô∏è‚É£ Exemplo de tratamento de erros:')
    await exemploTratamentoErros()
    console.log('\n')

    console.log('‚úÖ Todos os exemplos executados com sucesso!')

  } catch (error) {
    console.error('‚ùå Erro ao executar exemplos:', error)
    logger.error('Failed to execute examples', {
      error: error instanceof Error ? error.message : String(error)
    })
  }
}
