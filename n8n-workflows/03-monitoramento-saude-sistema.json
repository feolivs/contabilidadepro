{
  "name": "Monitoramento de Sa√∫de do Sistema",
  "nodes": [
    {
      "id": "cron-health-check",
      "name": "Health Check a cada 15min",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [100, 200],
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyMinute",
              "minute": 15
            }
          ]
        }
      }
    },
    {
      "id": "test-database",
      "name": "Testar Conex√£o Database",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [300, 100],
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT 'database_ok' as status, NOW() as timestamp, COUNT(*) as total_empresas FROM empresas WHERE status = 'ativa'"
      }
    },
    {
      "id": "test-edge-functions",
      "name": "Testar Edge Functions",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [300, 200],
      "parameters": {
        "method": "POST",
        "url": "{{ $env.SUPABASE_URL }}/functions/v1/health-check",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "contentType": "json",
        "bodyParameters": {
          "parameters": [
            {
              "name": "service",
              "value": "all"
            }
          ]
        },
        "options": {
          "timeout": 10000,
          "retry": {
            "enabled": true,
            "maxTries": 3
          }
        }
      }
    },
    {
      "id": "test-storage",
      "name": "Testar Storage",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [300, 300],
      "parameters": {
        "method": "GET",
        "url": "{{ $env.SUPABASE_URL }}/storage/v1/bucket/documentos",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {
          "timeout": 5000
        }
      }
    },
    {
      "id": "consolidar-status",
      "name": "Consolidar Status",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [500, 200],
      "parameters": {
        "jsCode": "const inputs = $input.all();\nconst timestamp = new Date().toISOString();\n\n// Inicializar status\nlet systemStatus = {\n  timestamp,\n  overall: 'healthy',\n  services: {\n    database: { status: 'unknown', response_time: 0, error: null },\n    edge_functions: { status: 'unknown', response_time: 0, error: null },\n    storage: { status: 'unknown', response_time: 0, error: null }\n  },\n  metrics: {\n    total_empresas: 0,\n    uptime_percentage: 100\n  },\n  alerts: []\n};\n\n// Processar resultados de cada teste\nfor (const input of inputs) {\n  const data = input.json;\n  \n  // Teste do Database\n  if (data.status === 'database_ok') {\n    systemStatus.services.database.status = 'healthy';\n    systemStatus.services.database.response_time = 50; // Mock\n    systemStatus.metrics.total_empresas = data.total_empresas;\n  }\n  \n  // Teste das Edge Functions\n  if (data.service === 'all' || data.functions) {\n    systemStatus.services.edge_functions.status = 'healthy';\n    systemStatus.services.edge_functions.response_time = data.response_time || 100;\n    \n    // Verificar fun√ß√µes espec√≠ficas\n    if (data.functions) {\n      const failedFunctions = data.functions.filter(f => f.status !== 'healthy');\n      if (failedFunctions.length > 0) {\n        systemStatus.services.edge_functions.status = 'degraded';\n        systemStatus.alerts.push({\n          type: 'edge_function_failure',\n          message: `${failedFunctions.length} Edge Functions com problemas`,\n          severity: 'medium',\n          functions: failedFunctions.map(f => f.name)\n        });\n      }\n    }\n  }\n  \n  // Teste do Storage\n  if (data.name === 'documentos' || data.id) {\n    systemStatus.services.storage.status = 'healthy';\n    systemStatus.services.storage.response_time = 30;\n  }\n}\n\n// Verificar se h√° erros\nconst services = Object.values(systemStatus.services);\nconst unhealthyServices = services.filter(s => s.status === 'unhealthy' || s.status === 'unknown');\nconst degradedServices = services.filter(s => s.status === 'degraded');\n\nif (unhealthyServices.length > 0) {\n  systemStatus.overall = 'unhealthy';\n  systemStatus.alerts.push({\n    type: 'service_down',\n    message: `${unhealthyServices.length} servi√ßos indispon√≠veis`,\n    severity: 'critical',\n    services: unhealthyServices\n  });\n} else if (degradedServices.length > 0) {\n  systemStatus.overall = 'degraded';\n}\n\n// Calcular uptime (mock - em produ√ß√£o viria de m√©tricas reais)\nsystemStatus.metrics.uptime_percentage = systemStatus.overall === 'healthy' ? 99.9 : 95.0;\n\nreturn [{ json: systemStatus }];"
      }
    },
    {
      "id": "check-alerts",
      "name": "Verificar se Precisa Alertar",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [700, 200],
      "parameters": {
        "conditions": {
          "options": [
            {
              "conditions": {
                "options": [
                  {
                    "leftValue": "={{ $json.overall }}",
                    "rightValue": "healthy",
                    "operator": {
                      "operation": "notEqual",
                      "type": "string"
                    }
                  }
                ]
              },
              "combineOperation": "any"
            }
          ]
        }
      }
    },
    {
      "id": "enviar-alerta",
      "name": "Enviar Alerta Cr√≠tico",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2,
      "position": [900, 150],
      "parameters": {
        "resource": "message",
        "operation": "send",
        "sendTo": "admin@contabilidadepro.com",
        "subject": "üö® ALERTA: Problema no Sistema ContabilidadePRO",
        "emailType": "html",
        "message": "<h2>üö® Alerta do Sistema</h2><p><strong>Status Geral:</strong> {{ $json.overall }}</p><p><strong>Timestamp:</strong> {{ $json.timestamp }}</p><h3>Servi√ßos:</h3><ul><li><strong>Database:</strong> {{ $json.services.database.status }} ({{ $json.services.database.response_time }}ms)</li><li><strong>Edge Functions:</strong> {{ $json.services.edge_functions.status }} ({{ $json.services.edge_functions.response_time }}ms)</li><li><strong>Storage:</strong> {{ $json.services.storage.status }} ({{ $json.services.storage.response_time }}ms)</li></ul><h3>Alertas:</h3><ul>{{ $json.alerts.map(a => `<li><strong>${a.type}:</strong> ${a.message} (${a.severity})</li>`).join('') }}</ul><p><em>Verifique o sistema imediatamente.</em></p>"
      }
    },
    {
      "id": "salvar-metricas",
      "name": "Salvar M√©tricas",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [900, 250],
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO system_health_metrics (timestamp, overall_status, database_status, database_response_time, edge_functions_status, edge_functions_response_time, storage_status, storage_response_time, total_empresas, uptime_percentage, alerts_count) VALUES ('{{ $json.timestamp }}', '{{ $json.overall }}', '{{ $json.services.database.status }}', {{ $json.services.database.response_time }}, '{{ $json.services.edge_functions.status }}', {{ $json.services.edge_functions.response_time }}, '{{ $json.services.storage.status }}', {{ $json.services.storage.response_time }}, {{ $json.metrics.total_empresas }}, {{ $json.metrics.uptime_percentage }}, {{ $json.alerts.length }})"
      }
    },
    {
      "id": "backup-diario",
      "name": "Backup Di√°rio",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [100, 400],
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyDay",
              "hour": 2,
              "minute": 0
            }
          ]
        }
      }
    },
    {
      "id": "executar-backup",
      "name": "Executar Backup",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [300, 400],
      "parameters": {
        "method": "POST",
        "url": "{{ $env.SUPABASE_URL }}/functions/v1/backup-service",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "contentType": "json",
        "bodyParameters": {
          "parameters": [
            {
              "name": "backup_type",
              "value": "daily"
            },
            {
              "name": "include_documents",
              "value": true
            }
          ]
        },
        "options": {
          "timeout": 300000
        }
      }
    },
    {
      "id": "log-backup",
      "name": "Log Backup",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [500, 400],
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO backup_log (backup_date, backup_type, status, file_size, duration_seconds, created_at) VALUES (CURRENT_DATE, 'daily', '{{ $json.status }}', {{ $json.file_size || 0 }}, {{ $json.duration_seconds || 0 }}, NOW())"
      }
    }
  ],
  "connections": {
    "Health Check a cada 15min": {
      "main": [
        [
          {
            "node": "Testar Conex√£o Database",
            "type": "main",
            "index": 0
          },
          {
            "node": "Testar Edge Functions",
            "type": "main",
            "index": 0
          },
          {
            "node": "Testar Storage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Testar Conex√£o Database": {
      "main": [
        [
          {
            "node": "Consolidar Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Testar Edge Functions": {
      "main": [
        [
          {
            "node": "Consolidar Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Testar Storage": {
      "main": [
        [
          {
            "node": "Consolidar Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Consolidar Status": {
      "main": [
        [
          {
            "node": "Verificar se Precisa Alertar",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verificar se Precisa Alertar": {
      "main": [
        [
          {
            "node": "Enviar Alerta Cr√≠tico",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Salvar M√©tricas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Backup Di√°rio": {
      "main": [
        [
          {
            "node": "Executar Backup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Executar Backup": {
      "main": [
        [
          {
            "node": "Log Backup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
}
