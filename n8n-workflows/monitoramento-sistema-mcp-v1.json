{
  "name": "Monitoramento Sistema MCP v1",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyMinute",
              "minute": 15
            }
          ]
        }
      },
      "id": "trigger-health-check",
      "name": "Health Check 15min",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  'database' as service,\n  'healthy' as status,\n  NOW() as timestamp,\n  COUNT(*) as total_empresas,\n  (SELECT COUNT(*) FROM fiscal_obligations WHERE status = 'pending') as prazos_pendentes,\n  (SELECT COUNT(*) FROM system_alerts WHERE resolved = false) as alertas_abertos\nFROM empresas \nWHERE status = 'ativa'",
        "options": {
          "queryBatching": "independently"
        }
      },
      "id": "test-database",
      "name": "Testar Database",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [460, 200],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "url": "https://selnwgpyjctpjzdrfrey.supabase.co/functions/v1/health-check",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "service",
              "value": "all"
            }
          ]
        },
        "options": {
          "timeout": 10000,
          "retry": {
            "enabled": true,
            "maxTries": 3
          }
        }
      },
      "id": "test-edge-functions",
      "name": "Testar Edge Functions",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [460, 300],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "url": "https://selnwgpyjctpjzdrfrey.supabase.co/storage/v1/bucket/documentos",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {
          "timeout": 5000
        }
      },
      "id": "test-storage",
      "name": "Testar Storage",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [460, 400],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Consolidar status de todos os servi√ßos\nconst inputs = $input.all();\nconst timestamp = new Date().toISOString();\n\n// Inicializar status do sistema\nlet systemStatus = {\n  timestamp,\n  overall: 'healthy',\n  services: {\n    database: { status: 'unknown', response_time: 0, error: null, metrics: {} },\n    edge_functions: { status: 'unknown', response_time: 0, error: null },\n    storage: { status: 'unknown', response_time: 0, error: null }\n  },\n  metrics: {\n    total_empresas: 0,\n    prazos_pendentes: 0,\n    alertas_abertos: 0,\n    uptime_percentage: 100\n  },\n  alerts: []\n};\n\n// Processar resultados de cada teste\nfor (const input of inputs) {\n  try {\n    const data = input.json;\n    \n    // Teste do Database\n    if (data.service === 'database') {\n      systemStatus.services.database.status = 'healthy';\n      systemStatus.services.database.response_time = 50;\n      systemStatus.metrics.total_empresas = data.total_empresas || 0;\n      systemStatus.metrics.prazos_pendentes = data.prazos_pendentes || 0;\n      systemStatus.metrics.alertas_abertos = data.alertas_abertos || 0;\n    }\n    \n    // Teste das Edge Functions\n    if (data.service === 'all' || data.functions) {\n      systemStatus.services.edge_functions.status = 'healthy';\n      systemStatus.services.edge_functions.response_time = 100;\n      \n      if (data.functions && Array.isArray(data.functions)) {\n        const failedFunctions = data.functions.filter(f => f.status !== 'healthy');\n        if (failedFunctions.length > 0) {\n          systemStatus.services.edge_functions.status = 'degraded';\n          systemStatus.alerts.push({\n            type: 'edge_function_failure',\n            message: `${failedFunctions.length} Edge Functions com problemas`,\n            severity: 'medium',\n            functions: failedFunctions.map(f => f.name)\n          });\n        }\n      }\n    }\n    \n    // Teste do Storage\n    if (data.name === 'documentos' || data.id || (data.url && data.url.includes('storage'))) {\n      systemStatus.services.storage.status = 'healthy';\n      systemStatus.services.storage.response_time = 30;\n    }\n    \n  } catch (error) {\n    console.error('Erro ao processar input:', error.message);\n    \n    // Marcar servi√ßos como degradados em caso de erro\n    if (input.error && input.error.message) {\n      const errorMsg = input.error.message;\n      if (errorMsg.includes('edge-functions') || errorMsg.includes('functions')) {\n        systemStatus.services.edge_functions.status = 'unhealthy';\n        systemStatus.services.edge_functions.error = errorMsg;\n      } else if (errorMsg.includes('storage')) {\n        systemStatus.services.storage.status = 'unhealthy';\n        systemStatus.services.storage.error = errorMsg;\n      }\n    }\n  }\n}\n\n// Determinar status geral\nconst services = Object.values(systemStatus.services);\nconst unhealthyServices = services.filter(s => s.status === 'unhealthy');\nconst degradedServices = services.filter(s => s.status === 'degraded');\nconst unknownServices = services.filter(s => s.status === 'unknown');\n\nif (unhealthyServices.length > 0) {\n  systemStatus.overall = 'unhealthy';\n  systemStatus.alerts.push({\n    type: 'service_down',\n    message: `${unhealthyServices.length} servi√ßos indispon√≠veis`,\n    severity: 'critical',\n    services: unhealthyServices.map(s => s.error || 'Erro desconhecido')\n  });\n} else if (degradedServices.length > 0) {\n  systemStatus.overall = 'degraded';\n} else if (unknownServices.length > 0) {\n  systemStatus.overall = 'degraded';\n  systemStatus.alerts.push({\n    type: 'service_unknown',\n    message: `${unknownServices.length} servi√ßos com status desconhecido`,\n    severity: 'medium'\n  });\n}\n\n// Calcular uptime\nsystemStatus.metrics.uptime_percentage = systemStatus.overall === 'healthy' ? 99.9 : \n  systemStatus.overall === 'degraded' ? 98.5 : 95.0;\n\n// Alertas baseados em m√©tricas\nif (systemStatus.metrics.prazos_pendentes > 50) {\n  systemStatus.alerts.push({\n    type: 'high_pending_obligations',\n    message: `${systemStatus.metrics.prazos_pendentes} prazos fiscais pendentes`,\n    severity: 'medium'\n  });\n}\n\nif (systemStatus.metrics.alertas_abertos > 20) {\n  systemStatus.alerts.push({\n    type: 'high_open_alerts',\n    message: `${systemStatus.metrics.alertas_abertos} alertas em aberto`,\n    severity: 'medium'\n  });\n}\n\nconsole.log(`Status geral: ${systemStatus.overall}, Alertas: ${systemStatus.alerts.length}`);\nreturn [{ json: systemStatus }];"
      },
      "id": "consolidar-status",
      "name": "Consolidar Status",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": [
            {
              "conditions": {
                "options": [
                  {
                    "leftValue": "={{ $json.overall }}",
                    "rightValue": "healthy",
                    "operator": {
                      "operation": "notEqual"
                    }
                  }
                ]
              },
              "combineOperation": "any"
            }
          ]
        }
      },
      "id": "check-alertas",
      "name": "Precisa Alertar?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "operation": "send",
        "fromEmail": "sistema@contabilidadepro.com",
        "toEmail": "admin@contabilidadepro.com",
        "subject": "üö® ALERTA: Problema no Sistema ContabilidadePRO",
        "html": "=<div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #dc2626; border-radius: 8px; background: #fef2f2;\">\n  <div style=\"background: #dc2626; color: white; padding: 15px; border-radius: 5px; margin-bottom: 20px; text-align: center;\">\n    <h2 style=\"margin: 0;\">üö® Alerta do Sistema</h2>\n  </div>\n  \n  <div style=\"background: white; padding: 20px; border-radius: 5px; margin-bottom: 15px;\">\n    <h3 style=\"color: #dc2626; margin-top: 0;\">Status Geral: {{ $json.overall }}</h3>\n    <p><strong>Timestamp:</strong> {{ $json.timestamp }}</p>\n    <p><strong>Uptime:</strong> {{ $json.metrics.uptime_percentage }}%</p>\n  </div>\n  \n  <div style=\"background: white; padding: 20px; border-radius: 5px; margin-bottom: 15px;\">\n    <h3 style=\"color: #374151; margin-top: 0;\">Status dos Servi√ßos:</h3>\n    <p><strong>Database:</strong> {{ $json.services.database.status }} ({{ $json.services.database.response_time }}ms)</p>\n    <p><strong>Edge Functions:</strong> {{ $json.services.edge_functions.status }} ({{ $json.services.edge_functions.response_time }}ms)</p>\n    <p><strong>Storage:</strong> {{ $json.services.storage.status }} ({{ $json.services.storage.response_time }}ms)</p>\n  </div>\n  \n  <div style=\"background: white; padding: 20px; border-radius: 5px; margin-bottom: 15px;\">\n    <h3 style=\"color: #374151; margin-top: 0;\">M√©tricas:</h3>\n    <p><strong>Empresas Ativas:</strong> {{ $json.metrics.total_empresas }}</p>\n    <p><strong>Prazos Pendentes:</strong> {{ $json.metrics.prazos_pendentes }}</p>\n    <p><strong>Alertas Abertos:</strong> {{ $json.metrics.alertas_abertos }}</p>\n  </div>\n  \n  <div style=\"background: #fef3c7; padding: 15px; border-radius: 5px; border-left: 4px solid #f59e0b;\">\n    <h4 style=\"color: #92400e; margin-top: 0;\">‚ö†Ô∏è A√ß√£o Necess√°ria:</h4>\n    <p style=\"color: #92400e;\">Verifique o sistema imediatamente e tome as medidas necess√°rias para resolver os problemas identificados.</p>\n  </div>\n  \n  <hr style=\"margin: 20px 0; border: none; border-top: 1px solid #e5e7eb;\">\n  <p style=\"font-size: 12px; color: #6b7280; text-align: center;\">\n    Alerta autom√°tico do Sistema de Monitoramento ContabilidadePRO\n  </p>\n</div>",
        "options": {}
      },
      "id": "enviar-alerta",
      "name": "Enviar Alerta Cr√≠tico",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [1120, 200],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO system_health_metrics (\n  timestamp, \n  overall_status, \n  database_status, \n  database_response_time, \n  edge_functions_status, \n  edge_functions_response_time, \n  storage_status, \n  storage_response_time, \n  total_empresas, \n  prazos_pendentes,\n  alertas_abertos,\n  uptime_percentage, \n  alerts_count\n) VALUES (\n  '{{ $json.timestamp }}', \n  '{{ $json.overall }}', \n  '{{ $json.services.database.status }}', \n  {{ $json.services.database.response_time }}, \n  '{{ $json.services.edge_functions.status }}', \n  {{ $json.services.edge_functions.response_time }}, \n  '{{ $json.services.storage.status }}', \n  {{ $json.services.storage.response_time }}, \n  {{ $json.metrics.total_empresas }}, \n  {{ $json.metrics.prazos_pendentes }},\n  {{ $json.metrics.alertas_abertos }},\n  {{ $json.metrics.uptime_percentage }}, \n  {{ $json.alerts.length }}\n)",
        "options": {
          "queryBatching": "independently"
        }
      },
      "id": "salvar-metricas",
      "name": "Salvar M√©tricas",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [1120, 400],
      "onError": "continueRegularOutput"
    }
  ],
  "connections": {
    "Health Check 15min": {
      "main": [
        [
          {
            "node": "Testar Database",
            "type": "main",
            "index": 0
          },
          {
            "node": "Testar Edge Functions",
            "type": "main",
            "index": 0
          },
          {
            "node": "Testar Storage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Testar Database": {
      "main": [
        [
          {
            "node": "Consolidar Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Testar Edge Functions": {
      "main": [
        [
          {
            "node": "Consolidar Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Testar Storage": {
      "main": [
        [
          {
            "node": "Consolidar Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Consolidar Status": {
      "main": [
        [
          {
            "node": "Precisa Alertar?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Precisa Alertar?": {
      "main": [
        [
          {
            "node": "Enviar Alerta Cr√≠tico",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Salvar M√©tricas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enviar Alerta Cr√≠tico": {
      "main": [
        [
          {
            "node": "Salvar M√©tricas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-01-19T16:00:00.000Z",
  "versionId": "1"
}
